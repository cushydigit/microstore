
services:
  gateway:
    image: gateway
    build: 
      context: .
      dockerfile: gateway/Dockerfile
    restart: always
    ports:
      - 8080:8080 ## host(localhost):container(inside docker)
    depends_on:
      - auth-service
      - product-service
      - order-service
      - redis
    environment:
      PORT: "8080"
      JWT_SECRET: "veryverysecretkey"
      AUTH_API_URL: "http://auth-service:8081"
      PRODUCT_API_URL: "http://product-service:8082"
      ORDER_API_URL: "http://order-service:8083"
      REDIS_ADDR: "redis:6379"

  auth-service:
    image: auth-service
    build: 
      context: .
      dockerfile: auth-service/Dockerfile
    restart: always
    ports:
      - 8081:8080
    deploy:
      mode: replicated
      replicas: 1
    environment:
      PORT: "8081"
      JWT_SECRET: "veryverysecretkey"
      DSN: "postgres://user:password@postgres:5432/authdb?sslmode=disable&connect_timeout=5"
    depends_on:
      - postgres

  product-service:
    image: product-service
    build: 
      context: .
      dockerfile: product-service/Dockerfile
    restart: always
    ports:
      - 8082:8080
    deploy:
      mode: replicated
      replicas: 1
    environment:
      PORT: "8082"
      DSN: "postgres://user:password@postgres:5432/productdb?sslmode=disable&connect_timeout=5"
    depends_on:
      - postgres

  order-service:
    image: order-service
    build: 
      context: .
      dockerfile: order-service/Dockerfile
    restart: always
    ports:
      - 8083:8080
    deploy:
      mode: replicated
      replicas: 1
    environment:
      PORT: "8083"
      DSN: "postgres://user:password@postgres:5432/orderdb?sslmode=disable&connect_timeout=5"
      PRODUCT_API_URL: "http://product-service:8082"
    depends_on:
      - postgres
      - product-service

  redis:
    image: docker.arvancloud.ir/redis:alpine
    restart: always
    ports:
      - 6379:6379


  postgres:
    image: docker.arvancloud.ir/postgres:14.0
    restart: always
    ports:
      - 5432:5432
    deploy:
      mode: replicate
      replicas: 1
    environment:
      POSTGRES_USER: user 
      POSTGRES_PASSWORD: password 
    volumes:
      - ./db-data/postgres/:/var/lib/postgresql/data/
      - ./db/init-auth.sql:/docker-entrypoint-initdb.d/init-auth.sql 
      - ./db/init-product.sql:/docker-entrypoint-initdb.d/init-product.sql
      - ./db/init-order.sql:/docker-entrypoint-initdb.d/init-order.sql
    command: |
      bash -c "
        docker-entrypoint.sh postgres & 
        until pg_isready -U user; do
          echo 'Waiting for Postgres to be ready...'
          sleep 2
        done &&
        psql -U user -tc \"SELECT 1 FROM pg_database WHERE datname = 'authdb';\" | grep -q 1 || psql -U user -c 'CREATE DATABASE authdb;' &&
        psql -U user -tc \"SELECT 1 FROM pg_database WHERE datname = 'productdb';\" | grep -q 1 || psql -U user -c  'CREATE DATABASE productdb;' && 
        psql -U user -tc \"SELECT 1 FROM pg_database WHERE datname = 'orderdb';\" | grep -q 1 || psql -U user -c 'CREATE DATABASE orderdb;' &&
        echo 'Running schema for authdb...' &&
        psql -U user -d authdb -f /docker-entrypoint-initdb.d/init-auth.sql &&
        echo 'Running schema for productdb...' &&
        psql -U user -d productdb -f /docker-entrypoint-initdb.d/init-product.sql &&
        echo 'Running schema for orderdb...' &&
        psql -U user -d orderdb -f /docker-entrypoint-initdb.d/init-order.sql &&
        tail -f /dev/null
      "
